<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>curry</title>
      <link href="/2023/08/03/curry/"/>
      <url>/2023/08/03/curry/</url>
      
        <content type="html"><![CDATA[<h3 id="转发自NGA—飞霞精灵。说出了勇士库里球迷的心声。"><a href="#转发自NGA—飞霞精灵。说出了勇士库里球迷的心声。" class="headerlink" title="转发自NGA—飞霞精灵。说出了勇士库里球迷的心声。"></a>转发自NGA—飞霞精灵。说出了勇士库里球迷的心声。</h3><p>老球迷应该都记得10年之后韦德的命运，11年输掉总决赛，让权给詹姆斯，自己改打无球，从全场超人变成只能爆发一节变副攻手，14年为留詹姆斯、自己争取大合同，主动降薪，结果詹姆斯转身走了。回来韦德看看自己的球队，满地鸡毛。那一年波什打了半个赛季就报销，老队友哈斯勒姆只能当吉祥物，罗尔邓不上不下，身边队友从钱莫斯到德拉季奇到安德森白边，一共换了差不多20人。最后韦德打得一年比一年艰难，随着年龄增长，身体不支，靠无球和脚步跟对手周旋，艰难地维持着场均20分的球星体面，终于几年后离开热火，最后晚年回热火退役时候，连首发都没了。 </p><p>然后再看库里，过去6年的命运和韦德何其相似。16年顶着一堆内外debuff输掉总决赛，从联盟之巅跌落谷底，杜兰特来投，库里让权给杜兰特，失去最基础的高位挡拆，自己大幅改打无球。两年多下来，杜兰特盆满钵满，冠军，FMVP，詹杜大小王、联盟前二人、勇士领袖、全都赚满了。耐克造势詹杜舆论风潮，媒体吹起来毫无下限，17年夺冠游行现场，变耐克展销会。“联盟进入杜兰特时代了”、“杜兰特太强了，他让库里都变成了他的皮蓬”、“杜兰特是那支勇士里最好的球员”(到今年勇士夺冠前还有人这么说)、“KDisabetterMVP”，还能品鉴多少？</p><p>库里那几年收获了啥呢？一次一阵，被当做抱大腿的副手冠军，然后啥都没了，当年的得分王MVP，总冠军选手，直接跌落为皮蓬位。连双核都捞不到。402三分是科尔带头否定的，“去年状态太好了，今年肯定打不出来”。17年夺冠后，科尔著名的三次开会，库里是僚机副手，影响比赛能力不如小前锋詹杜卡、夺冠演讲直接忘了。很多人说这是安抚杜兰特的手法，要我说扯TM淡。当时队内进攻权限和媒体曝光度几乎都在大幅度地向着杜兰特倾斜。想想看吧，今年普洱刚刚打出来，勇管都能夸“我们有两个库里了、双核驱动”，17年勇士可是正经有双MVP，库里愣是成了副手。</p><p>库里辛辛苦苦从勇士废墟上建立起的冠军和球队，一夜之间被杜兰特夺走，勇士王朝成了杜兰特的功劳，库里似乎是个陪衬，好像勇士虚位以待就等杜兰特王者降临，辛苦数年最后成就别人嫁衣。换一般球星早就炸了。结果库里还在为了团队辛苦坚持。甚至勇士上下汤伊李这些老队友，都在吹着杜兰特是我们最好的球员。哪怕他们平时的进攻都得靠库里跑起来，他们连上wifi才能打开。18和19年，KD逐渐想玩持球大核，复刻阿詹套路。不断地要球权、增加进攻权限，18西决时勇士内部爆发过冲突，库里忍下来了。 19年矛盾彻底激化出格林公式，KD赛季结束离队，留给库里一地鸡毛。简直就是高清复刻阿詹的模式：先组大团捞够荣誉，挤压掉同期对手，等球队过了争冠窗口期，薪金爆炸+伤病多，就赶紧走，然后换个有空间球队再组大团夺冠。</p><p>留下来的库里看着勇士一地鸡毛：克莱重伤、自己手伤报销，球队只能摆烂。回归后也没好哪去，格林酗酒摆烂，克莱再度大伤，练了一年的新中锋克里斯开赛就报销，摆烂选来的怀斯曼在场等于对面多个约老师，连挡拆都要自己教，新秀一阵的帕斯卡尔休赛季体型失控被弃用，寒冰射手阶段的普洱，以及完全玩不明白的雷神。最靠谱的后场轮换搭档是今年上场就被球迷喷的妹夫，最靠谱的内线轮换搭档是今年已经打不上球的安德森。哪怕维金斯好点，去年被嘲笑成勇士最烂的交易、“价值一盒饼干”。老球员一听科尔或库里的“要不要来我们这打球”，扭头就走，从小加到巴图姆，勇士请了一个遍，连毛都没有。大家都觉得没希望。你问勇士还有夺冠希望吗？帕金斯比个0笑话你呢。</p><p>别说问勇士了，就是问库里，也没人认库里能恢复为超巨，一大票人都在认为库里16年状态纯属偶然，被人针对了就啥也不是。哪怕库里19年杜兰特伤退后就做过连胜两场淘汰老队手哈登、西决36.5分淘汰开拓者(ESPN：西决MVP是格林的)、总决赛场均30、单场47，也没人信。这剧本，和当年的韦德何其相似？然后库里炸出个战神库，轮出个得分王，效率依旧接近180，一阵+MVP前三，韦德奥胖魔术师这些老超巨纷纷坐不住了替他吹牛，“你们都忘了他曾经也是头野兽”。</p><p>但有个锤子用啊，8人轮换打了俩月最后全队体力不支倒在附加赛。杜兰特点赞笑着骂库里motherfuckertrashass呢。然后杜兰特轮出最强系列赛二轮出局，照样联盟第一人吹着，本赛季开赛前，那是已经造势好了的接班老詹、杜兰特时代就要归来了。当然……现实是，谁都没想到，这一年成了库里自我救赎的一年。杜兰特从开赛就被还是残阵的勇士打出了三节打卡。 三年下来，库里增肌、加大训练、保持体型、增强防守，陪着普洱佩顿练级、拖着格林回归正轨，最后普洱终于解冻、汤神至少回归，哪怕自己常规赛跟被做实验一样反复调整轮换影响状态，他都在球队里坚持下来了。34岁的人，下滑不可避免，换别人早就靠数据维持一下球星体面，他还在咬牙强化自己的弱项。</p><p>最后总决赛终于得到了回报。不给罚球？拿纯分突投结合出43分战神。增肌变成了更强的三分和突破抗压。有种再罚一次6犯离场？面对霍福德和塔图姆错位单吃照样能防下来。最后库里完美收官。和司机一样，16年丢掉的东西，等了6年，终于22年拿了回来。 随他们说什么去，库里才是勇士王朝最坚硬的那根柱子和最高的那座塔。QTMD半场开香槟的杜兰特，恐怕你做梦也没想到，被你榨干的那个你瞧不上的trashass队友、对你最好的那个MVP超巨，会比你更早再次夺冠、并且完成闭环吧。</p>]]></content>
      
      
      <categories>
          
          <category> curry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 篮球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2023/08/03/suibi/"/>
      <url>/2023/08/03/suibi/</url>
      
        <content type="html"><![CDATA[<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><h3 id="虎扑收集的评论"><a href="#虎扑收集的评论" class="headerlink" title="虎扑收集的评论"></a>虎扑收集的评论</h3><p>​我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂的情怀。少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。</p><p>​成长的标志就是懂得克制自己。克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不能把她变成自己身体的一部分，她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附以及自我感动。</p><h3 id="关于三行诗"><a href="#关于三行诗" class="headerlink" title="关于三行诗"></a>关于三行诗</h3><p>人们总是这样<br>一边想起，一边忘记<br>你不理我我不怪你</p><p>我在梦里见过你<br>听风呼吸与月低语时吻你<br>海浪涌起霞光四溢时忘记</p><p>刚过去的十分钟<br>七分想你，三分忘记<br>不给自己一分后悔的余地</p><p>今天明天都给你<br>心意却藏在心底<br>像你不会理会的昨天，飘散在风里</p><p>我爱你的方式就像为你写诗<br>固执的押韵排比<br>偷偷的潜藏心意</p><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>我所有的自负都来自我的自卑，<br>所有的英雄气概都来自于我内心的软弱，<br>所有的振振有词都因为心中满是怀疑。<br>我假装无情，其实是痛恨自己的深情。<br>我以为人生的意义在于四处游荡流亡，<br>其实只是掩饰至今没有找到愿意驻足的地方。</p><p>–《看不见的城市》 伊塔洛卡尔维诺</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/08/02/hello-world/"/>
      <url>/2023/08/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2023/08/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python通过解释器翻译代码为01进制并提交给计算机执行</span></span><br><span class="line"><span class="comment"># .py文件为Python的代码文件</span></span><br><span class="line"><span class="comment"># 开头为单行注释(# 后一般空一格)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 为多行注释 内部可换行  &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 定义变量 格式 变量名称 = 变量值</span></span><br><span class="line">moneny = <span class="number">100</span></span><br><span class="line"><span class="comment"># type()可以得到数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(moneny)) </span><br><span class="line"><span class="string">&quot;&quot;&quot; 字符串类型 可以用单引号&#x27;&#x27; 双引号&quot;&quot; 三引号 &quot;&quot;&quot;</span> <span class="string">&quot;&quot;&quot; 来定义 &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 字符串类型转换  </span></span><br><span class="line"><span class="built_in">int</span>() <span class="built_in">float</span>() <span class="built_in">str</span>() </span><br><span class="line"><span class="comment"># 任何类型都可以通过str()转换为字符串 但字符串内必须是数字才能转换为数字 浮点数转小数会丢失小数部分</span></span><br><span class="line"><span class="comment"># 标识符 内容限定(中英文 下划线 数字)大小写敏感 不可使用关键字</span></span><br><span class="line"><span class="comment"># 运算符(+、-、*、/、//取整除、%取余、**指数)</span></span><br><span class="line"><span class="comment"># 占位符(%s、%d、%f)将内容转换为字符串 整数  浮点数</span></span><br><span class="line">name = <span class="string">&quot;张&quot;</span></span><br><span class="line">message = <span class="string">&quot;你是%s你有%s&quot;</span>%(name,moneny)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="string">&quot;&quot;&quot;精度控制 m.n的形式控制(m控制宽度 .n控制小数点精度) </span></span><br><span class="line"><span class="string">如%5d(控制宽度为5 不足自动补空格 %5.2f 控制宽度为5 小数点精度2 .2f不限制宽度 只取小数点2位)&quot;&quot;&quot;</span></span><br><span class="line">num = <span class="number">3.33333</span></span><br><span class="line">test = <span class="string">&quot;输出%5.2f&quot;</span>%(num)</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="comment"># 可通过f&quot;&#123;变量&#125;&#123;变量&#125;&quot;的方式快速格式化 不理会类型 不做精度控制</span></span><br><span class="line"><span class="comment"># 格式化表达式同上 总结例子 test1.py</span></span><br><span class="line"><span class="comment"># 输入input() 无论输入的是什么类型 最终结果都是字符串类型</span></span><br><span class="line">name2 = <span class="built_in">input</span>(<span class="string">&quot;tell me who you are &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;you are <span class="subst">&#123;name2&#125;</span>, right ?&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python中常用数据类型</p><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">数字（Number）</td><td align="center">支持<br />整数(int)<br />浮点数(float)<br />复数(complex)<br />布尔(bool)</td><td align="center">整数(int)，如： 10、20<br />浮点数(float) 如：12.13、-13.144<br />复数(complex) 如：4+3j，以j结尾表示复数<br />布尔(bool) 表示显示生活中的逻辑 即真或假 True本质为1</td></tr><tr><td align="center">字符串(String)</td><td align="center">描述文本的一种类型</td><td align="center">字符串由任意数量的字符组成</td></tr><tr><td align="center">列表(List)</td><td align="center">有序的可变序列</td><td align="center">使用最频繁的数据类型，可有序记录一堆数据</td></tr><tr><td align="center">元组(Tuple)</td><td align="center">有序的不可变序列</td><td align="center">可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合(Set)</td><td align="center">无序不可重复集合</td><td align="center">可无序记录一堆不可重复的Python数据集合</td></tr><tr><td align="center">字典(Dictionary)</td><td align="center">无序Key-Value集合</td><td align="center">可无序记录一堆Key-Value型的Python数据集合</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断、循环、函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; if 要判断的语句：</span></span><br><span class="line"><span class="string">条件成立做的事</span></span><br><span class="line"><span class="string">    elif 条件：</span></span><br><span class="line"><span class="string">    else：</span></span><br><span class="line"><span class="string">    不成立执行&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 判断条件的结果一定是布尔类型</span></span><br><span class="line"><span class="comment"># 条件后加 ：</span></span><br><span class="line"><span class="comment"># 归属于if语句的代码块 前方填充4个空格缩进</span></span><br><span class="line"><span class="comment"># 嵌套判断语句 根据空格缩进来决定层次关系</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; while循环 提供布尔类型结果 空格缩进 循环终止条件 &quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; for循环语法 for 临时变量 in 待处理条件: 无法定义循环条件，只能被动取出数据处理 循环内语句空格缩进 &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># range range(num1,num2,step) 获得一个数字序列（可迭代类型一种） 从num1开始到num2结束按照step为步长 for i in range(5) 即 0,1,2,3,4</span></span><br><span class="line"><span class="comment"># for循环中的临时变量 作用域限定为循环内 是一种规范 实际是可以访问到循环外的数据</span></span><br><span class="line"><span class="comment"># continue中断本次循环直接进入下一次循环 break结束所在循环</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 函数体 返回值  传参 形参和实参  格式 def 函数名(传入参数): 函数体 return 返回值 </span></span><br><span class="line"><span class="string">没有返回值 默认是none 返回noneType类型  可以使用多行注释添加说明文档 鼠标悬停可以查看文档&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 局部变量作用域只存在与函数体内部生效 全局变量在函数体内外都能生效</span></span><br><span class="line"><span class="comment"># global 关键字可以在函数体内部将局部变量声明为全局变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据容器</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;数据容器根据特点不同，如 是否支持重复元素 是否可以修改 是否有序等等</span></span><br><span class="line"><span class="string">分为5类： 列表(list)、元祖(tuple)、字符串(str)、集合(set)、字典(dict)&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 列表支持一次存储多个数据，且可以为不同的数据类型，支持嵌套</span></span><br><span class="line"><span class="comment"># 列表的下标所以 从0开始 反向索引从-1开始 支持嵌套索引 列表定义为 list=[[],[]]</span></span><br><span class="line"><span class="comment"># 列表可以修改 元祖一旦定义完成，不能修改 元祖定义 t1 = (1,) 必须带有逗号 哪怕只有一个数据</span></span><br><span class="line"><span class="comment"># 元祖内容不能修改 可以修改元祖内的list中的内容 不能改变list类型 变量名称=tuple()</span></span><br><span class="line"><span class="comment"># 字符串规整操作 字符串.strip() 去掉前后指定字符串 默认为空格</span></span><br><span class="line"><span class="comment"># 序列指内容连续、有序、可使用下标索引的一类数据容器 包括列表、元祖、字符串都可以视为序列</span></span><br><span class="line"><span class="comment"># 序列切片 从一个序列中取出一个子序列[起始下标：结束下标：步长] 不会影响序列本身 得到一个新序列</span></span><br><span class="line"><span class="comment"># 标识从起始下标开始到结束下标（不包括）步长标识每次跳过N-1个元素</span></span><br><span class="line"><span class="comment"># 步长为负数表示反向取</span></span><br><span class="line"><span class="comment"># 集合是无序不可重复的 去重 不支持下标索引 变量名称=set()</span></span><br><span class="line"><span class="comment"># 字典定义 my_dict = dict()  my_dict = &#123;&#125; 每一个元素是一个键值对</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 字典键值对的Key和Value可以是任意类型（key不能是字典） 字典内Key不允许重复，重复添加等同于覆盖原有数据</span></span><br><span class="line"><span class="string"> 字典不可用下标索引，而是通过Key检索Value&quot;&quot;&quot;</span> </span><br><span class="line"><span class="comment"># 函数参数传递补充  位置传递 *args  根据传入的参数生成一个元祖tuple args是元祖类型 位置传递</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">test(<span class="string">&#x27;zz&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment"># 关键字传递  参数是&#x27;键=值&#x27;的情况下 所有值都会被Kwargs接收根据&#x27;键=值&#x27;组成字典</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**Kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(Kwargs)</span><br><span class="line">test(name = <span class="string">&#x27;zz&#x27;</span>,age = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 函数本身作为参数传递 传入的是计算逻辑而非传入数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;lambda 传入参数：函数体(一行代码) 表示定义无名称的匿名函数</span></span><br><span class="line"><span class="string">只能写一行&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>编号</strong></th><th><strong>使用方式</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>1</td><td>列表.append(元素)</td><td>向列表中追加一个元素</td></tr><tr><td>2</td><td>列表.extend(容器)</td><td>将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td>3</td><td>列表.insert(下标, 元素)</td><td>在指定下标处，插入指定的元素</td></tr><tr><td>4</td><td>del 列表[下标]</td><td>删除列表指定下标元素</td></tr><tr><td>5</td><td>列表.pop(下标)</td><td>删除列表指定下标元素</td></tr><tr><td>6</td><td>列表.remove(元素)</td><td>从前向后，删除此元素第一个匹配项</td></tr><tr><td>7</td><td>列表.clear()</td><td>清空列表</td></tr><tr><td>8</td><td>列表.count(元素)</td><td>统计此元素在列表中出现的次数</td></tr><tr><td>9</td><td>列表.index(元素)</td><td>查找指定元素在列表的下标  找不到报错ValueError</td></tr><tr><td>10</td><td>len(列表)</td><td>统计容器内有多少元素</td></tr></tbody></table><table><thead><tr><th><strong>编号</strong></th><th><strong>操作</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>1</td><td>集合.add(元素)</td><td>集合内添加一个元素</td></tr><tr><td>2</td><td>集合.remove(元素)</td><td>移除集合内指定的元素</td></tr><tr><td>3</td><td>集合.pop()</td><td>从集合中随机取出一个元素</td></tr><tr><td>4</td><td>集合.clear()</td><td>将集合清空</td></tr><tr><td>5</td><td>集合1.difference(集合2)</td><td>得到一个新集合，内含2个集合的差集  原有的2个集合内容不变</td></tr><tr><td>6</td><td>集合1.difference_update(集合2)</td><td>在集合1中，删除集合2中存在的元素  集合1被修改，集合2不变</td></tr><tr><td>7</td><td>集合1.union(集合2)</td><td>得到1个新集合，内含2个集合的全部元素  原有的2个集合内容不变</td></tr><tr><td>8</td><td>len(集合)</td><td>得到一个整数，记录了集合的元素数量</td></tr></tbody></table><table><thead><tr><th><strong>编号</strong></th><th><strong>操作</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>1</td><td>字典[Key]</td><td>获取指定Key对应的Value值</td></tr><tr><td>2</td><td>字典[Key] &#x3D; Value</td><td>添加或更新键值对</td></tr><tr><td>3</td><td>字典.pop(Key)</td><td>取出Key对应的Value并在字典内删除此Key的键值对</td></tr><tr><td>4</td><td>字典.clear()</td><td>清空字典</td></tr><tr><td>5</td><td>字典.keys()</td><td>获取字典的全部Key，可用于for循环遍历字典</td></tr><tr><td>6</td><td>len(字典)</td><td>计算字典内的元素数量</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line"><span class="comment"># 使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</span></span><br><span class="line"><span class="built_in">open</span>(name,mode,encoding)</span><br><span class="line"><span class="string">&quot;&quot;&quot;name 是要打开的文件名的字符串（可以包含文件所在具体路径）</span></span><br><span class="line"><span class="string">mode 设置打开文件的模式（访问模式）：只读、写入、追加等</span></span><br><span class="line"><span class="string">encoding 编码格式&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># a模式 如果文件存在则追加内容 w模式 文件存在就清空并覆盖</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>文件对象  &#x3D; open(file, mode, encoding)</th><th>打开文件获得文件对象</th></tr></thead><tbody><tr><td>文件对象.read(num)</td><td>读取指定长度字节  不指定num读取文件全部</td></tr><tr><td>文件对象.readline()</td><td>读取一行</td></tr><tr><td>文件对象.readlines()</td><td>读取全部行，得到列表</td></tr><tr><td>for line in 文件对象</td><td>for循环文件行，一次循环得到一行数据</td></tr><tr><td>文件对象.close()</td><td>关闭文件对象</td></tr><tr><td>with open() as f</td><td>通过with  open语法打开文件，可以自动关闭</td></tr></tbody></table><table><thead><tr><th>r</th><th>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</th></tr></thead><tbody><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，原有内容会被删除。  如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，新的内容将会被写入到已有内容之后。  如果该文件不存在，创建新文件进行写入。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常操作</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line"><span class="keyword">except</span>(异常捕获的类型)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">finally</span>  </span><br><span class="line"><span class="comment"># 异常具有传递性</span></span><br><span class="line"><span class="comment"># 模块的导入 </span></span><br><span class="line">[<span class="keyword">from</span> 模块名]<span class="keyword">import</span> [模块|类|变量|函数|*][<span class="keyword">as</span> 别名]</span><br><span class="line"><span class="string">&quot;&quot;&quot;if _name_ = &#x27;_main_&#x27; 变量的功能是 只有程序是直接执行的才会进入 if内部 被导入不执行 可以用来执行测试方法 </span></span><br><span class="line"><span class="string">_all_变量可以控制from 模块 import * 的时候哪些功能可以被导入&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; class 类名：</span></span><br><span class="line"><span class="string">成员变量</span></span><br><span class="line"><span class="string">    def 成员方法(self,参数列表)</span></span><br><span class="line"><span class="string">    成员方法体</span></span><br><span class="line"><span class="string">对象 = 类名称()        &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># self标识类对象本身 只有通过self，成员方法才能访问类的成员变量</span></span><br><span class="line"><span class="comment"># self出现在形参列表中，但是不占用参数位置，无需理会</span></span><br><span class="line"><span class="comment"># 构造方法__int__ 构造方法在构建类对象的时候会自动运行 可以给成员变量赋值 self关键字不能省略 方法内使用成员变量需要self.</span></span><br><span class="line"><span class="comment"># 类对象方法 __str__字符串转换方法 __lt__小于符号 __le__ &gt;=符号 __eq__等于 </span></span><br><span class="line"><span class="comment"># 封装 变量或者方法 用__开头就能变成私有变量和私有方法</span></span><br><span class="line"><span class="comment"># 私有变量无法赋值 也无法获取 私有方法无法直接被类对象调用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 继承 class类(父类[，父类2,...,N])</span></span><br><span class="line"><span class="string">类内容体</span></span><br><span class="line"><span class="string">pass(占位语句 保证函数(或方法)或类定义的完整性 无内容 空的意思)</span></span><br><span class="line"><span class="string">单继承和多继承 多继承按照顺序从左到右依次继承 先继承的优先级高于后继承</span></span><br><span class="line"><span class="string">复写表示对父类的成员属性或成员方法进行重新定义 在子类中重新实现同名成员方法或成员属性即可 </span></span><br><span class="line"><span class="string">子类调用父类成员 使用成员变量：父类名.成员变量或 super().成员变量</span></span><br><span class="line"><span class="string">子类使用成员方法 父类名.成员方法(self) 或 super().成员方法()</span></span><br><span class="line"><span class="string">只可以在子类内部调用父类的同名成员 子类的实体类对象调用默认是调用子类复写&quot;&quot;&quot;</span> </span><br><span class="line"><span class="comment"># 类型注解 基础语法 变量:类型 或在注解中#type:类型</span></span><br><span class="line"><span class="comment"># 类型注解只是提示性 并非决定性</span></span><br><span class="line"><span class="comment"># 形参注解 和返回值注解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参名：类型,形参名：类型</span>) -&gt;返回值类型</span><br><span class="line"><span class="comment"># union联合注解 Union使用需导包 from typing import Union 使用 Union[类型,...,类型]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正则表达式常用操作符</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">表示任何单个字符</td><td align="left"></td></tr><tr><td align="left">[ ]</td><td align="left">字符集，对单个字符给出取值范围</td><td align="left">[abc] 表示a、b、c，[a-z] 表示a-z单个字符</td></tr><tr><td align="left">[^ ]</td><td align="left">非字符集，对单个字符给出排除范围</td><td align="left">[^abc] 表示非a或b或c的单个字符</td></tr><tr><td align="left">*</td><td align="left">前一个字符0次或无限次扩展</td><td align="left">abc* 表示ab、abc、abcc、abccc等</td></tr><tr><td align="left">+</td><td align="left">前一个字符1次或无限次扩展</td><td align="left">abc+ 表示abc、abcc、abccc等</td></tr><tr><td align="left">?</td><td align="left">前一个字符0次或1次扩展</td><td align="left">abc? 表示ab、abc</td></tr><tr><td align="left">|</td><td align="left">左右表达式任意一个</td><td align="left">abc|def 表示 abc、def</td></tr><tr><td align="left">{m}</td><td align="left">扩展前一个字符m次</td><td align="left">ab{2}c 表示abbc</td></tr><tr><td align="left">{m,n}</td><td align="left">扩展前一个字符m至n次</td><td align="left">ab{1,2}c 表示abc、abbc</td></tr><tr><td align="left">^</td><td align="left">匹配字符串开头</td><td align="left">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="left">$</td><td align="left">匹配字符串结尾</td><td align="left">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="left">( )</td><td align="left">分组标记，内部只能使用 | 操作符</td><td align="left">(abc)表示abc,(abc | def)表示abc、def</td></tr><tr><td align="left">\d</td><td align="left">数字，等价于[0-9]</td><td align="left"></td></tr><tr><td align="left">\w</td><td align="left">单词字符，（包括一个下划线）等价于[A-Z a-z 0-9 _ ]</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
